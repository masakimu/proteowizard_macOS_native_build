*** libraries/boost-build/src/tools/darwin.jam.orig	Sun Nov  1 16:20:48 2020
--- libraries/boost-build/src/tools/darwin.jam	Sun Nov  1 19:44:35 2020
***************
*** 137,148 ****
      # - Set the toolset generic common options.
      common.handle-options darwin : $(condition) : $(command) : $(options) ;
      
      # - GCC 4.0 and higher in Darwin does not have -fcoalesce-templates.
!     if $(real-version) < "4.0.0"
      {
          flags darwin.compile.c++ OPTIONS $(condition) : -fcoalesce-templates ;
      }
      # - GCC 4.2 and higher in Darwin does not have -Wno-long-double.
      if $(real-version) < "4.2.0"
      {
          flags darwin.compile OPTIONS $(condition) : -Wno-long-double ;
--- 137,151 ----
      # - Set the toolset generic common options.
      common.handle-options darwin : $(condition) : $(command) : $(options) ;
      
+     real-version = [ regex.split $(real-version) \\. ] ;
      # - GCC 4.0 and higher in Darwin does not have -fcoalesce-templates.
!     #if $(real-version) < "4.0.0"
!     if [ version.version-less $(real-version) : 4 0 ]
      {
          flags darwin.compile.c++ OPTIONS $(condition) : -fcoalesce-templates ;
      }
      # - GCC 4.2 and higher in Darwin does not have -Wno-long-double.
+     #if $(real-version) < "4.2.0"
      if $(real-version) < "4.2.0"
      {
          flags darwin.compile OPTIONS $(condition) : -Wno-long-double ;
*** libraries/boost_1_67_0/boost/range/algorithm/max_element.hpp.orig	Sun Nov  1 16:22:23 2020
--- libraries/boost_1_67_0/boost/range/algorithm/max_element.hpp	Mon Nov  2 16:39:59 2020
***************
*** 9,20 ****
  #ifndef BOOST_RANGE_ALGORITHM_MAX_ELEMENT_HPP_INCLUDED
  #define BOOST_RANGE_ALGORITHM_MAX_ELEMENT_HPP_INCLUDED
  
  #include <boost/concept_check.hpp>
  #include <boost/range/begin.hpp>
  #include <boost/range/end.hpp>
  #include <boost/range/concepts.hpp>
  #include <boost/range/detail/range_return.hpp>
- #include <algorithm>
  
  namespace boost
  {
--- 9,20 ----
  #ifndef BOOST_RANGE_ALGORITHM_MAX_ELEMENT_HPP_INCLUDED
  #define BOOST_RANGE_ALGORITHM_MAX_ELEMENT_HPP_INCLUDED
  
+ #include <boost/algorithm/minmax_element.hpp>
  #include <boost/concept_check.hpp>
  #include <boost/range/begin.hpp>
  #include <boost/range/end.hpp>
  #include <boost/range/concepts.hpp>
  #include <boost/range/detail/range_return.hpp>
  
  namespace boost
  {
***************
*** 32,38 ****
  max_element(ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return std::max_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
--- 32,38 ----
  max_element(ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return boost::first_max_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
***************
*** 41,47 ****
  max_element(const ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return std::max_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
--- 41,47 ----
  max_element(const ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return boost::first_max_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
***************
*** 50,56 ****
  max_element(ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return std::max_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  /// \overload
--- 50,56 ----
  max_element(ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return boost::first_max_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  /// \overload
***************
*** 59,65 ****
  max_element(const ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return std::max_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  // range_return overloads
--- 59,65 ----
  max_element(const ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return boost::first_max_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  // range_return overloads
***************
*** 71,77 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         std::max_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
--- 71,77 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         boost::first_max_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
***************
*** 82,88 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         std::max_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
--- 82,88 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         boost::first_max_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
***************
*** 93,99 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         std::max_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
--- 93,99 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         boost::first_max_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
***************
*** 104,110 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         std::max_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
--- 104,110 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         boost::first_max_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
*** libraries/boost_1_67_0/boost/range/algorithm/min_element.hpp.orig	Sun Nov  1 16:22:23 2020
--- libraries/boost_1_67_0/boost/range/algorithm/min_element.hpp	Mon Nov  2 16:42:21 2020
***************
*** 9,20 ****
  #ifndef BOOST_RANGE_ALGORITHM_MIN_ELEMENT_HPP_INCLUDED
  #define BOOST_RANGE_ALGORITHM_MIN_ELEMENT_HPP_INCLUDED
  
  #include <boost/concept_check.hpp>
  #include <boost/range/begin.hpp>
  #include <boost/range/end.hpp>
  #include <boost/range/concepts.hpp>
  #include <boost/range/detail/range_return.hpp>
- #include <algorithm>
  
  namespace boost
  {
--- 9,20 ----
  #ifndef BOOST_RANGE_ALGORITHM_MIN_ELEMENT_HPP_INCLUDED
  #define BOOST_RANGE_ALGORITHM_MIN_ELEMENT_HPP_INCLUDED
  
+ #include <boost/algorithm/minmax_element.hpp>
  #include <boost/concept_check.hpp>
  #include <boost/range/begin.hpp>
  #include <boost/range/end.hpp>
  #include <boost/range/concepts.hpp>
  #include <boost/range/detail/range_return.hpp>
  
  namespace boost
  {
***************
*** 32,38 ****
  min_element(ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return std::min_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
--- 32,38 ----
  min_element(ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return boost::first_min_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
***************
*** 41,47 ****
  min_element(const ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return std::min_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
--- 41,47 ----
  min_element(const ForwardRange& rng)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return boost::first_min_element(boost::begin(rng), boost::end(rng));
  }
  
  /// \overload
***************
*** 50,56 ****
  min_element(ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return std::min_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  /// \overload
--- 50,56 ----
  min_element(ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
!     return boost::first_min_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  /// \overload
***************
*** 59,65 ****
  min_element(const ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return std::min_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  // range_return overloads
--- 59,65 ----
  min_element(const ForwardRange& rng, BinaryPredicate pred)
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
!     return boost::first_min_element(boost::begin(rng), boost::end(rng), pred);
  }
  
  // range_return overloads
***************
*** 71,77 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         std::min_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
--- 71,77 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         boost::first_min_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
***************
*** 82,88 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         std::min_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
--- 82,88 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         boost::first_min_element(boost::begin(rng), boost::end(rng)),
          rng);
  }
  
***************
*** 93,99 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         std::min_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
--- 93,99 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
      return range_return<ForwardRange,re>::pack(
!         boost::first_min_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
***************
*** 104,110 ****
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         std::min_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
--- 104,110 ----
  {
      BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
      return range_return<const ForwardRange,re>::pack(
!         boost::first_min_element(boost::begin(rng), boost::end(rng), pred),
          rng);
  }
  
*** libraries/boost_1_67_0/boost/atomic/detail/ops_gcc_x86_dcas.hpp.orig	Sun Nov  1 16:22:23 2020
--- libraries/boost_1_67_0/boost/atomic/detail/ops_gcc_x86_dcas.hpp	Sun Nov  1 21:54:59 2020
***************
*** 158,169 ****
          }
          else
          {
  #if defined(__clang__)
              // Clang cannot allocate eax:edx register pairs but it has sync intrinsics
              value = __sync_val_compare_and_swap(&storage, (storage_type)0, (storage_type)0);
  #elif defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
              uint32_t value_bits[2];
!             // We don't care for comparison result here; the previous value will be stored into value anyway.
              // Also we don't care for ebx and ecx values, they just have to be equal to eax and edx before cmpxchg8b.
              __asm__ __volatile__
              (
--- 158,177 ----
          }
          else
          {
+ 	  /*
  #if defined(__clang__)
              // Clang cannot allocate eax:edx register pairs but it has sync intrinsics
              value = __sync_val_compare_and_swap(&storage, (storage_type)0, (storage_type)0);
  #elif defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
+ 	  */
+             // Note that despite const qualification cmpxchg8b below may issue a store to the storage. The storage value
+             // will not change, but this prevents the storage to reside in read-only memory.
+ 
+ #if defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
+ 	  
              uint32_t value_bits[2];
! 	  
! 	  // We don't care for comparison result here; the previous value will be stored into value anyway.
              // Also we don't care for ebx and ecx values, they just have to be equal to eax and edx before cmpxchg8b.
              __asm__ __volatile__
              (
***************
*** 196,210 ****
      static BOOST_FORCEINLINE bool compare_exchange_strong(
          storage_type volatile& storage, storage_type& expected, storage_type desired, memory_order, memory_order) BOOST_NOEXCEPT
      {
! #if defined(__clang__)
! 
!         // Clang cannot allocate eax:edx register pairs but it has sync intrinsics
!         storage_type old_expected = expected;
          expected = __sync_val_compare_and_swap(&storage, old_expected, desired);
          return expected == old_expected;
  
! #elif defined(BOOST_ATOMIC_DETAIL_X86_ASM_PRESERVE_EBX)
! 
          bool success;
  
  #if defined(BOOST_ATOMIC_DETAIL_ASM_HAS_FLAG_OUTPUTS)
--- 204,222 ----
      static BOOST_FORCEINLINE bool compare_exchange_strong(
          storage_type volatile& storage, storage_type& expected, storage_type desired, memory_order, memory_order) BOOST_NOEXCEPT
      {
! /* #if defined(__clang__)  */
!         // Note that despite const qualification cmpxchg16b below may issue a store to the storage. The storage value
!         // will not change, but this prevents the storage to reside in read-only memory.
! 
!       /*        // Clang cannot allocate eax:edx register pairs but it has sync intrinsics  
!        */
!       /* 
! 	 storage_type old_expected = expected;
          expected = __sync_val_compare_and_swap(&storage, old_expected, desired);
          return expected == old_expected;
  
! 	#elif defined(BOOST_ATOMIC_DETAIL_X86_ASM_PRESERVE_EBX)*/
! #if defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
          bool success;
  
  #if defined(BOOST_ATOMIC_DETAIL_ASM_HAS_FLAG_OUTPUTS)
***************
*** 401,414 ****
  
      static BOOST_FORCEINLINE storage_type load(storage_type const volatile& storage, memory_order) BOOST_NOEXCEPT
      {
  #if defined(__clang__)
  
          // Clang cannot allocate rax:rdx register pairs but it has sync intrinsics
          storage_type value = storage_type();
          return __sync_val_compare_and_swap(&storage, value, value);
- 
  #elif defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
! 
          // Some compilers can't allocate rax:rdx register pair either and also don't support 128-bit __sync_val_compare_and_swap
          uint64_t value_bits[2];
  
--- 413,427 ----
  
      static BOOST_FORCEINLINE storage_type load(storage_type const volatile& storage, memory_order) BOOST_NOEXCEPT
      {
+       /*
  #if defined(__clang__)
  
          // Clang cannot allocate rax:rdx register pairs but it has sync intrinsics
          storage_type value = storage_type();
          return __sync_val_compare_and_swap(&storage, value, value);
  #elif defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
!       */
! #if defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
          // Some compilers can't allocate rax:rdx register pair either and also don't support 128-bit __sync_val_compare_and_swap
          uint64_t value_bits[2];
  
***************
*** 452,457 ****
--- 465,471 ----
      static BOOST_FORCEINLINE bool compare_exchange_strong(
          storage_type volatile& storage, storage_type& expected, storage_type desired, memory_order, memory_order) BOOST_NOEXCEPT
      {
+       /*
  #if defined(__clang__)
  
          // Clang cannot allocate rax:rdx register pairs but it has sync intrinsics
***************
*** 460,466 ****
          return expected == old_expected;
  
  #elif defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
! 
          // Some compilers can't allocate rax:rdx register pair either but also don't support 128-bit __sync_val_compare_and_swap
          bool success;
          __asm__ __volatile__
--- 474,481 ----
          return expected == old_expected;
  
  #elif defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)
!       */
! #if defined(BOOST_ATOMIC_DETAIL_X86_NO_ASM_AX_DX_PAIRS)      
          // Some compilers can't allocate rax:rdx register pair either but also don't support 128-bit __sync_val_compare_and_swap
          bool success;
          __asm__ __volatile__
